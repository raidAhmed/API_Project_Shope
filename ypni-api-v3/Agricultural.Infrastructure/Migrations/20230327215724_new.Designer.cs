// <auto-generated />
using System;
using Agricultural.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agricultural.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230327215724_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Agricultural.Domain.Entity.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ActivityName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUser")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ActivityType");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("ActivityType", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            ActivityName = "خدمي",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUser = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            ActivityName = "تجاري",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUser = 0,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.AdditionalSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("AdditionalSectionsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AdditionalSectionsName");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<int?>("MainClassificationId")
                        .HasColumnType("int")
                        .HasColumnName("MainClassificationId");

                    b.Property<int?>("ParnetSectionId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_AdditionalSections");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("MainClassificationId");

                    b.HasIndex("ParnetSectionId");

                    b.ToTable("AdditionalSections", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Banks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUser")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Banks");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Banks", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<int>("ManufactureCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Brand");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ManufactureCompanyId");

                    b.ToTable("Brand", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.BusinessCommercial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BankAccount");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceProviderId");

                    b.Property<string>("TradeRecord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TradeRecord");

                    b.HasKey("Id")
                        .HasName("PK_BusinessCommercial");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("BusinessCommercial", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Sku");

                    b.Property<bool>("State")
                        .HasColumnType("bit")
                        .HasColumnName("State");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal")
                        .HasColumnName("Total");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_Cart");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.CartDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal")
                        .HasColumnName("Price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int?>("Product_variantionId")
                        .HasColumnType("int")
                        .HasColumnName("Product_variantionId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceProviderId");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Sku");

                    b.Property<bool>("State")
                        .HasColumnType("bit")
                        .HasColumnName("State");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal")
                        .HasColumnName("Total");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_CartDetails");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Product_variantionId");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("CartDetails", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.CheckOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id")
                        .HasName("PK_CheckOut");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("CheckOut", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_City");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("City", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("code");

                    b.HasKey("Id")
                        .HasName("PK_Color");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Color", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ComplainantPic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ComplainantToPartyId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComplainantToPartyId");

                    b.ToTable("ComplainantPic");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ComplainantToParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReciverId")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ReciverId");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SenderId");

                    b.Property<int>("ServiceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("ServiceType");

                    b.Property<string>("Topic")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Topic");

                    b.Property<string>("TypeofMesseage")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TypeofMesseage");

                    b.Property<bool>("requestState")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_ComplainantToParty");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("ComplainantToParty", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ConsultationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FarmerId")
                        .HasColumnType("int");

                    b.Property<bool>("RequestState")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("ConsultationRequest");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ConsultationRequestPic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ConsultationRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationRequestId");

                    b.ToTable("ConsultationRequestPic");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUser")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Currency");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Currency", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Directorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Directorate");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("CityId");

                    b.ToTable("Directorate", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Farmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("EarthInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EarthInfo");

                    b.Property<string>("EarthLength")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EarthLength");

                    b.Property<string>("EarthWidth")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EarthWidth");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceProviderId");

                    b.HasKey("Id")
                        .HasName("PK_Farmer");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Farmer", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.MainClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ActivityTypeId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("MainClassificationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MainClassificationName");

                    b.HasKey("Id")
                        .HasName("PK_MainClassification");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("MainClassification", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ManufactureCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("CompanyInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_ManufactureCompany");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("ManufactureCompany", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Markets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<string>("DescriptionAddress")
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DescriptionAddress");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("int")
                        .HasColumnName("DirectorateId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Markets");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Markets", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("Date")
                        .HasColumnName("DeleteAt");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageUrl");

                    b.Property<int?>("MarketsId")
                        .HasColumnType("int")
                        .HasColumnName("MarketsId");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("State");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Topic");

                    b.HasKey("Id")
                        .HasName("PK_News");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("MarketsId");

                    b.ToTable("News", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int>("ApplyTo")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal")
                        .HasColumnName("Price");

                    b.Property<decimal>("PriceRequire")
                        .HasColumnType("decimal")
                        .HasColumnName("PriceRequire");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int>("QtRequire")
                        .HasColumnType("int")
                        .HasColumnName("QtRequire");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .HasColumnName("State");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .HasColumnName("Type");

                    b.Property<int>("serviceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("serviceProviderId");

                    b.HasKey("Id")
                        .HasName("PK_Offer");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ProductId");

                    b.HasIndex("serviceProviderId");

                    b.ToTable("Offer", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.OfficialParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("OrganisationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OrganisationType");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceProviderId");

                    b.HasKey("Id")
                        .HasName("PK_OfficialParty");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("OfficialParty", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("Quntity")
                        .HasColumnType("int")
                        .HasColumnName("Quntity");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("State");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal")
                        .HasColumnName("Total");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_Order");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("CartId");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal")
                        .HasColumnName("Price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int?>("Product_variantionId")
                        .HasColumnType("int")
                        .HasColumnName("Product_variantionId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int?>("ServiceProviderId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("ServiceProviderId");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Sku");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("State");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal")
                        .HasColumnName("Total");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_OrderDetails");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Product_variantionId");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Add_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdditionalSectionsId")
                        .HasColumnType("int");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Current_Stock")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Free_Shipping")
                        .HasColumnType("bit");

                    b.Property<int?>("MainClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("Min_qty")
                        .HasColumnType("int");

                    b.Property<int?>("Minimum_Order_Qty")
                        .HasColumnType("int");

                    b.Property<bool>("Multiply_Qty")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Negotiation")
                        .HasColumnType("bit");

                    b.Property<bool>("ProductStates")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Refundable")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialSectionsId")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AdditionalSectionsId");

                    b.HasIndex("BrandId");

                    b.HasIndex("MainClassificationId");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("SpecialSectionsId");

                    b.HasIndex("UserId");

                    b.ToTable("Product", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_AdditionalDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_AdditionalDetails");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("Pk_Product_Attribute");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Product_Attribute", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Name = "الحجم"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Name = "النوع"
                        });
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Colors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Colors");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Image");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("Product_Unit");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_User_Favourites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Product_User_Favourites");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Variant_Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Product_AttributeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Product_AttributeId");

                    b.ToTable("Product_Variant_Attribute");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_variantion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_variantion");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ProductEvaluaton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductEvaluaton");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ProFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_ProFeatures");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("ProFeatures", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ProviderEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("ProviderEvaluation");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Description");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Email");

                    b.Property<string>("Logo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Logo");

                    b.Property<int>("NatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(111111)
                        .HasColumnName("NatId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TradeName");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Type");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewPlace")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ServiceProvider");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("Uq_PhoneNumberServiceProvIder");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("TradeName")
                        .IsUnique()
                        .HasDatabaseName("Uq_TradeNameServiceProvIder");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceProvider", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            ActivityTypeId = 1,
                            Description = "الافضل",
                            Email = "m@g",
                            Logo = "Upload/ServiceProvider/8d168bb7-7e70-48c1-9ea9-74f63ed8eb75.jpg",
                            NatId = 1,
                            PhoneNumber = "775752111",
                            ServiceTypeId = 1,
                            TradeName = "متجري",
                            Type = "جواز",
                            UserId = "4a2e1650-21bd-4e67-832e-2e99c267a2e4",
                            ViewPlace = 0
                        });
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ServicesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_ServicesType");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("ServicesType", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Name = "خدمة"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Name = "تاجر"
                        });
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Details");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("EndDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceProviderId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValue(new DateTime(2023, 3, 28, 0, 57, 23, 762, DateTimeKind.Local).AddTicks(344))
                        .HasColumnName("StartDate");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Type");

                    b.HasKey("Id")
                        .HasName("PK_Slider");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Slider", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SliderImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Details");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ImageUrl");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("SliderId")
                        .HasColumnType("int")
                        .HasColumnName("SliderId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Url");

                    b.HasKey("Id")
                        .HasName("PK_SliderImages");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("SliderId");

                    b.ToTable("SliderImages", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_AdditionalSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int?>("AdditionalSectionsId")
                        .HasColumnType("int")
                        .HasColumnName("AdditionalSectionsId");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceProviderId");

                    b.HasKey("Id")
                        .HasName("PK_SP_AdditionalSections");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("AdditionalSectionsId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("SP_AdditionalSections", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Description");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("int")
                        .HasColumnName("DirectorateId");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Street");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_Address");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("DirectorateId");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("Address", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_MainClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int?>("MainClassificationId")
                        .HasColumnType("int")
                        .HasColumnName("MainClassificationId");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceProviderId");

                    b.HasKey("Id")
                        .HasName("PK_SP_MainClassification");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("MainClassificationId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("SP_MainClassification", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_ProFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ProFeaturesId")
                        .HasColumnType("int")
                        .HasColumnName("ProFeaturesId");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceProviderId");

                    b.HasKey("Id")
                        .HasName("PK_SP_ProFeatures");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ProFeaturesId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("SP_ProFeatures", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_User_Favourites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("SP_User_Favourites");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SpecialSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int?>("AdditionalSectionsId")
                        .HasColumnType("int")
                        .HasColumnName("AdditionalSectionsId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<int?>("MainClassificationId")
                        .HasColumnType("int")
                        .HasColumnName("MainClassificationId");

                    b.Property<int?>("ParnetSectionId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceProviderId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("SpecialSectionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SpecialSectionName");

                    b.HasKey("Id")
                        .HasName("PK_SpecialSections");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("AdditionalSectionsId");

                    b.HasIndex("MainClassificationId");

                    b.HasIndex("ParnetSectionId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("SpecialSections", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SupportRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Description");

                    b.Property<int?>("FarmerId")
                        .HasColumnType("int")
                        .HasColumnName("FarmerId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageUrl");

                    b.Property<int?>("OfficialPartyId")
                        .HasColumnType("int")
                        .HasColumnName("OfficialPartyId");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Topic");

                    b.Property<bool>("requestState")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_SupportRequest");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("FarmerId");

                    b.HasIndex("OfficialPartyId");

                    b.ToTable("SupportRequest", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int>("value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PK_Unit");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Unit", "dbo");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("State")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("UserType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");

                    b.HasData(
                        new
                        {
                            Id = "4a2e1650-21bd-4e67-832e-2e99c267a2e4",
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "c270bb22-b4d9-4abf-8d06-942d4b633836",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Agricultural@Gmail.com",
                            EmailConfirmed = false,
                            FirstName = "شركة",
                            Image = "Upload/Users/d765abae-79c2-4ff8-975e-fb9e5578aa5c.jpg",
                            IsDeleted = false,
                            LastName = "كوانتم",
                            LockoutEnabled = false,
                            NormalizedEmail = "AGRICULTURAL@GMAIL.COM",
                            NormalizedUserName = "QUANTUM",
                            PasswordHash = "AQAAAAEAACcQAAAAENJa4jon8qZGz5PQxo/UyKb5CkZZpIjFPSt7pxtp2qdddM9X7So5M5+XQqzrKKxWsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c72cd74c-33c9-4e61-87fa-a2e640740365",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "Quantum",
                            UserType = (byte)0
                        });
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.User_Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BanksAccountNum")
                        .HasColumnType("int");

                    b.Property<int>("BanksId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BanksId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Bank");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Weekdays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Weekdays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "السبت"
                        },
                        new
                        {
                            Id = 2,
                            Name = "الاحد"
                        },
                        new
                        {
                            Id = 3,
                            Name = "الاثنين"
                        },
                        new
                        {
                            Id = 4,
                            Name = "الثلاثاء"
                        },
                        new
                        {
                            Id = 5,
                            Name = "الاربعاء"
                        },
                        new
                        {
                            Id = 6,
                            Name = "الخميس"
                        },
                        new
                        {
                            Id = 7,
                            Name = "الجمعة"
                        });
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekdaysId")
                        .HasColumnType("int");

                    b.Property<int>("WorkinPoeriodsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("WeekdaysId");

                    b.HasIndex("WorkinPoeriodsId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.WorkinPoeriods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkinPoeriods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "فترة"
                        },
                        new
                        {
                            Id = 2,
                            Name = "فترتين"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ساعه24"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");

                    b.HasData(
                        new
                        {
                            Id = "ca34737e-e863-40aa-a82f-adbd3207988a",
                            ConcurrencyStamp = "b9fce677-ff9b-4d55-93b0-dcb97d12b11c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8c1f7d67-0b9e-44ef-83d4-6e4ef72d3b6f",
                            ConcurrencyStamp = "ca3b3647-fb97-40a0-ad64-8a3d645cdc03",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "eedae456-fa3a-47a0-9764-c634214bbe42",
                            ConcurrencyStamp = "a8333576-d0ec-4caa-925c-cf7113f8df7d",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "cb512048-1ad1-437b-8930-1b70a31e4d5c",
                            ConcurrencyStamp = "de8c59e2-0bf9-451e-8c0f-672e0335fbf2",
                            Name = "ServiceProvider",
                            NormalizedName = "SERVICEPROVIDER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");

                    b.HasData(
                        new
                        {
                            UserId = "4a2e1650-21bd-4e67-832e-2e99c267a2e4",
                            RoleId = "ca34737e-e863-40aa-a82f-adbd3207988a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.AdditionalSections", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.MainClassification", "MainClassification")
                        .WithMany("AdditionalSections")
                        .HasForeignKey("MainClassificationId")
                        .HasConstraintName("FK_AdditionalSections_MainClassification");

                    b.HasOne("Agricultural.Domain.Entity.AdditionalSections", "additionalSectionParent")
                        .WithMany("additionalSectionChild")
                        .HasForeignKey("ParnetSectionId");

                    b.Navigation("MainClassification");

                    b.Navigation("additionalSectionParent");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Brand", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ManufactureCompany", "ManufactureCompany")
                        .WithMany("Brands")
                        .HasForeignKey("ManufactureCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Brand_ManufactureCompany");

                    b.Navigation("ManufactureCompany");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.BusinessCommercial", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("BusinessCommercials")
                        .HasForeignKey("ServiceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_BusinessCommercials_ServiceProvider");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Cart", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("Carts")
                        .HasForeignKey("ServiceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_ServiceProvider");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("ServiceProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.CartDetails", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_CartDetails_Cart");

                    b.HasOne("Agricultural.Domain.Entity.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CartDetails_Product");

                    b.HasOne("Agricultural.Domain.Entity.Product_variantion", "Product_Variantion")
                        .WithMany("CartDetails")
                        .HasForeignKey("Product_variantionId")
                        .HasConstraintName("FK_CartDetails_ProductVariation");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("CartDetails")
                        .HasForeignKey("ServiceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_CartDetiles_ServiceProvider");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("CartDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CartDetiles_User");

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("Product_Variantion");

                    b.Navigation("ServiceProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ComplainantPic", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ComplainantToParty", "ComplainantToParty")
                        .WithMany("ComplainantPics")
                        .HasForeignKey("ComplainantToPartyId");

                    b.Navigation("ComplainantToParty");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ConsultationRequest", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Farmer", "Farmer")
                        .WithMany("ConsultationRequests")
                        .HasForeignKey("FarmerId");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("ConsultationRequests")
                        .HasForeignKey("ServiceProviderId");

                    b.Navigation("Farmer");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ConsultationRequestPic", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ConsultationRequest", "ConsultationRequest")
                        .WithMany("ConsultationRequestPics")
                        .HasForeignKey("ConsultationRequestId");

                    b.Navigation("ConsultationRequest");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Directorate", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.City", "City")
                        .WithMany("Directorates")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Directorates_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Farmer", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("Farmers")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("FK_Farmers_ServiceProvider");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.MainClassification", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ActivityType", "ActivityType")
                        .WithMany("MainClassifications")
                        .HasForeignKey("ActivityTypeId")
                        .HasConstraintName("FK_MainClassifications_ActivityType");

                    b.Navigation("ActivityType");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.News", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Markets", "Markets")
                        .WithMany("News")
                        .HasForeignKey("MarketsId")
                        .IsRequired()
                        .HasConstraintName("FK_Newss_Markets");

                    b.Navigation("Markets");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Offer", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Product", "product")
                        .WithMany("Offers")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Offers_Product");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "serviceProvider")
                        .WithMany("Offers")
                        .HasForeignKey("serviceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_Offers_ServiceProvider");

                    b.Navigation("product");

                    b.Navigation("serviceProvider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.OfficialParty", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("OfficialPartys")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("FK_OfficialPartys_ServiceProvider");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Order", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Cart", "Cart")
                        .WithMany("Orders")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_Order_Cart");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("FK_Orders_ServiceProvider");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Orders_User");

                    b.Navigation("Cart");

                    b.Navigation("ServiceProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.OrderDetails", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Order");

                    b.HasOne("Agricultural.Domain.Entity.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Product");

                    b.HasOne("Agricultural.Domain.Entity.Product_variantion", "Product_Variantion")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Product_variantionId")
                        .HasConstraintName("FK_OrderDetails_ProductVariation");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_ServiceProvider");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("OrderDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_OrderDetails_User");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Product_Variantion");

                    b.Navigation("ServiceProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ActivityType", "ActivityType")
                        .WithMany("Products")
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("Agricultural.Domain.Entity.AdditionalSections", "AdditionalSections")
                        .WithMany("Products")
                        .HasForeignKey("AdditionalSectionsId");

                    b.HasOne("Agricultural.Domain.Entity.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Agricultural.Domain.Entity.MainClassification", "MainClassification")
                        .WithMany("Products")
                        .HasForeignKey("MainClassificationId");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("Products")
                        .HasForeignKey("ServiceProviderId");

                    b.HasOne("Agricultural.Domain.Entity.SpecialSections", "SpecialSections")
                        .WithMany("Products")
                        .HasForeignKey("SpecialSectionsId");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId");

                    b.Navigation("ActivityType");

                    b.Navigation("AdditionalSections");

                    b.Navigation("Brand");

                    b.Navigation("MainClassification");

                    b.Navigation("ServiceProvider");

                    b.Navigation("SpecialSections");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_AdditionalDetails", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Product", "Product")
                        .WithMany("Product_AdditionalDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Colors", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Color", "Color")
                        .WithMany("Product_Colors")
                        .HasForeignKey("ColorId")
                        .IsRequired();

                    b.HasOne("Agricultural.Domain.Entity.Product", "Product")
                        .WithMany("Product_Colors")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Image", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Product", "Product")
                        .WithMany("product_Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Unit", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Product", "Prodact")
                        .WithMany("product_Units")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("Agricultural.Domain.Entity.Unit", "Unit")
                        .WithMany("product_Units")
                        .HasForeignKey("UnitId")
                        .IsRequired();

                    b.Navigation("Prodact");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_User_Favourites", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Product", "Product")
                        .WithMany("product_User_Favourites")
                        .HasForeignKey("ProductId");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("product_User_Favourites")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Variant_Attribute", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Product", "Product")
                        .WithMany("product_Variant_Attributes")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("Agricultural.Domain.Entity.Product_Attribute", "Product_Attribute")
                        .WithMany("product_Variant_Attributes")
                        .HasForeignKey("Product_AttributeId")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Product_Attribute");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_variantion", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Product", "Product")
                        .WithMany("product_Variantions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ProductEvaluaton", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Product", "Product")
                        .WithMany("productEvaluatons")
                        .HasForeignKey("ProductId");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("productEvaluatons")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ProviderEvaluation", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("providerEvaluations")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("providerEvaluations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ServiceProvider", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agricultural.Domain.Entity.ServicesType", "ServiceType")
                        .WithMany("serviceProviders")
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceProvIder_ServiceType");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceProvIder_User");

                    b.Navigation("ActivityType");

                    b.Navigation("ServiceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Slider", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("sliders")
                        .HasForeignKey("ServiceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_Slider_ServiceProvider");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SliderImages", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Slider", "Slider")
                        .WithMany("SliderImages")
                        .HasForeignKey("SliderId")
                        .IsRequired()
                        .HasConstraintName("FK_SliderImage_Slider");

                    b.Navigation("Slider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_AdditionalSections", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.AdditionalSections", "AdditionalSections")
                        .WithMany("SP_AdditionalSections")
                        .HasForeignKey("AdditionalSectionsId")
                        .HasConstraintName("FK_SP_AdditionalSections_AdditionalSections");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("SP_AdditionalSections")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("FK_SP_AdditionalSections_ServiceProvider");

                    b.Navigation("AdditionalSections");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_Address", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Directorate", "Directorate")
                        .WithMany("SP_Address")
                        .HasForeignKey("DirectorateId")
                        .IsRequired()
                        .HasConstraintName("FK_SP_Address_Directorate");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", null)
                        .WithMany("SP_Address")
                        .HasForeignKey("ServiceProviderId");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("SP_Address")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SP_Address_User");

                    b.Navigation("Directorate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_MainClassification", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.MainClassification", "MainClassification")
                        .WithMany("SP_MainClassifications")
                        .HasForeignKey("MainClassificationId")
                        .HasConstraintName("FK_SP_MainClassificationsm_MainClassification");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("SP_MainClassifications")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("FK_SP_MainClassificationsm_ServiceProvider");

                    b.Navigation("MainClassification");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_ProFeatures", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ProFeatures", "ProFeatures")
                        .WithMany("SP_ProFeatures")
                        .HasForeignKey("ProFeaturesId")
                        .HasConstraintName("FK_SP_ProFeatures_ProFeature");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("SP_ProFeatures")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("FK_SP_ProFeatures_ServiceProvider");

                    b.Navigation("ProFeatures");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SP_User_Favourites", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("sP_User_Favourites")
                        .HasForeignKey("ServiceProviderId")
                        .IsRequired();

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany("SP_User_Favourites")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("ServiceProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SpecialSections", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.AdditionalSections", "AdditionalSections")
                        .WithMany("SpecialSections")
                        .HasForeignKey("AdditionalSectionsId")
                        .IsRequired()
                        .HasConstraintName("FK_SpecialSections_AdditionalSections");

                    b.HasOne("Agricultural.Domain.Entity.MainClassification", "MainClassification")
                        .WithMany("SpecialSections")
                        .HasForeignKey("MainClassificationId")
                        .IsRequired()
                        .HasConstraintName("FK_SpecialSections_MainClassification");

                    b.HasOne("Agricultural.Domain.Entity.SpecialSections", "ToSpecialSections")
                        .WithMany("FormSpecialSectionslist")
                        .HasForeignKey("ParnetSectionId")
                        .HasConstraintName("FK_SpecialSections_SpecialSections");

                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("SpecialSections")
                        .HasForeignKey("ServiceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_SpecialSections_ServiceProvider");

                    b.Navigation("AdditionalSections");

                    b.Navigation("MainClassification");

                    b.Navigation("ServiceProvider");

                    b.Navigation("ToSpecialSections");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SupportRequest", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Farmer", "Farmer")
                        .WithMany("SupportRequests")
                        .HasForeignKey("FarmerId")
                        .HasConstraintName("FK_SupportRequests_Farmer");

                    b.HasOne("Agricultural.Domain.Entity.OfficialParty", "OfficialParty")
                        .WithMany("SupportRequests")
                        .HasForeignKey("OfficialPartyId")
                        .HasConstraintName("FK_SP_SupportRequests_OfficialParty");

                    b.Navigation("Farmer");

                    b.Navigation("OfficialParty");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.User_Bank", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.Banks", "Banks")
                        .WithMany("User_Bank")
                        .HasForeignKey("BanksId");

                    b.HasOne("Agricultural.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.WorkingHours", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany("WorkingHours")
                        .HasForeignKey("ServiceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkingHours_ServiceProvIder");

                    b.HasOne("Agricultural.Domain.Entity.Weekdays", "Weekdays")
                        .WithMany("WorkingHours")
                        .HasForeignKey("WeekdaysId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkingHours_weekdays");

                    b.HasOne("Agricultural.Domain.Entity.WorkinPoeriods", "WorkinPoeriods")
                        .WithMany("WorkingHours")
                        .HasForeignKey("WorkinPoeriodsId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkingHours_WorkinPoeriods");

                    b.Navigation("ServiceProvider");

                    b.Navigation("Weekdays");

                    b.Navigation("WorkinPoeriods");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agricultural.Domain.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Agricultural.Domain.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ActivityType", b =>
                {
                    b.Navigation("MainClassifications");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.AdditionalSections", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SP_AdditionalSections");

                    b.Navigation("SpecialSections");

                    b.Navigation("additionalSectionChild");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Banks", b =>
                {
                    b.Navigation("User_Bank");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Cart", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.City", b =>
                {
                    b.Navigation("Directorates");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Color", b =>
                {
                    b.Navigation("Product_Colors");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ComplainantToParty", b =>
                {
                    b.Navigation("ComplainantPics");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ConsultationRequest", b =>
                {
                    b.Navigation("ConsultationRequestPics");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Directorate", b =>
                {
                    b.Navigation("SP_Address");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Farmer", b =>
                {
                    b.Navigation("ConsultationRequests");

                    b.Navigation("SupportRequests");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.MainClassification", b =>
                {
                    b.Navigation("AdditionalSections");

                    b.Navigation("Products");

                    b.Navigation("SP_MainClassifications");

                    b.Navigation("SpecialSections");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ManufactureCompany", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Markets", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.OfficialParty", b =>
                {
                    b.Navigation("SupportRequests");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("Offers");

                    b.Navigation("OrderDetails");

                    b.Navigation("Product_AdditionalDetails");

                    b.Navigation("Product_Colors");

                    b.Navigation("productEvaluatons");

                    b.Navigation("product_Images");

                    b.Navigation("product_Units");

                    b.Navigation("product_User_Favourites");

                    b.Navigation("product_Variant_Attributes");

                    b.Navigation("product_Variantions");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_Attribute", b =>
                {
                    b.Navigation("product_Variant_Attributes");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Product_variantion", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ProFeatures", b =>
                {
                    b.Navigation("SP_ProFeatures");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ServiceProvider", b =>
                {
                    b.Navigation("BusinessCommercials");

                    b.Navigation("CartDetails");

                    b.Navigation("Carts");

                    b.Navigation("ConsultationRequests");

                    b.Navigation("Farmers");

                    b.Navigation("Offers");

                    b.Navigation("OfficialPartys");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("SP_AdditionalSections");

                    b.Navigation("SP_Address");

                    b.Navigation("SP_MainClassifications");

                    b.Navigation("SP_ProFeatures");

                    b.Navigation("SpecialSections");

                    b.Navigation("WorkingHours");

                    b.Navigation("providerEvaluations");

                    b.Navigation("sP_User_Favourites");

                    b.Navigation("sliders");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.ServicesType", b =>
                {
                    b.Navigation("serviceProviders");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Slider", b =>
                {
                    b.Navigation("SliderImages");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.SpecialSections", b =>
                {
                    b.Navigation("FormSpecialSectionslist");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Unit", b =>
                {
                    b.Navigation("product_Units");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.User", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("SP_Address");

                    b.Navigation("SP_User_Favourites");

                    b.Navigation("ServiceProviders");

                    b.Navigation("productEvaluatons");

                    b.Navigation("product_User_Favourites");

                    b.Navigation("providerEvaluations");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.Weekdays", b =>
                {
                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("Agricultural.Domain.Entity.WorkinPoeriods", b =>
                {
                    b.Navigation("WorkingHours");
                });
#pragma warning restore 612, 618
        }
    }
}
